{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///home/davi/adp/apps/frontend/src/components/Header.tsx"],"sourcesContent":["import statesData from \"@/utils/constants/states.json\";\n\nconst { states } = statesData;\n\ninterface HeaderProps {\n  selectedStates: string[];\n  selectedQuarter: string;\n}\n\nexport default function Header({ selectedStates, selectedQuarter }: HeaderProps) {\n  const getStateName = (stateCode: string) => {\n    if (stateCode === \"ALL\") return \"All States\";\n    const state = states.find((s) => s.code === stateCode);\n    return state?.name || stateCode;\n  };\n\n  return (\n    <header className=\"mb-8\">\n      <h1 className=\"text-3xl font-bold text-gray-800 mb-4\">\n        Employment Data for {selectedQuarter}\n      </h1>\n      <div className=\"flex items-center gap-2\">\n        <span className=\"font-medium text-gray-700\">States:</span>\n        <div className=\"flex flex-wrap gap-1\">\n          {selectedStates.map((state, index) => (\n            <span\n              key={index}\n              className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-500 text-white\"\n            >\n              {getStateName(state)}\n            </span>\n          ))}\n        </div>\n      </div>\n    </header>\n  );\n}"],"names":[],"mappings":";;;;AAAA;;;AAEA,MAAM,EAAE,MAAM,EAAE,GAAG,+HAAA,CAAA,UAAU;AAOd,SAAS,OAAO,KAAgD;QAAhD,EAAE,cAAc,EAAE,eAAe,EAAe,GAAhD;IAC7B,MAAM,eAAe,CAAC;QACpB,IAAI,cAAc,OAAO,OAAO;QAChC,MAAM,QAAQ,OAAO,IAAI,CAAC,CAAC,IAAM,EAAE,IAAI,KAAK;QAC5C,OAAO,CAAA,kBAAA,4BAAA,MAAO,IAAI,KAAI;IACxB;IAEA,qBACE,6LAAC;QAAO,WAAU;;0BAChB,6LAAC;gBAAG,WAAU;;oBAAwC;oBAC/B;;;;;;;0BAEvB,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAK,WAAU;kCAA4B;;;;;;kCAC5C,6LAAC;wBAAI,WAAU;kCACZ,eAAe,GAAG,CAAC,CAAC,OAAO,sBAC1B,6LAAC;gCAEC,WAAU;0CAET,aAAa;+BAHT;;;;;;;;;;;;;;;;;;;;;;AAUnB;KA3BwB","debugId":null}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file:///home/davi/adp/apps/frontend/src/types/census.ts"],"sourcesContent":["export interface EmploymentData {\n  state: string;\n  stateCode: string;\n  totalEmployment: number;\n  maleEmployment?: number;\n  femaleEmployment?: number;\n  failed?: boolean;\n  error?: string;\n}\n\nexport interface FilterState {\n  selectedStates: string[];\n  selectedQuarter: string;\n  selectedSex: string[];\n  breakdownBySex: boolean;\n}\n\nexport interface ApiResponse {\n  data: EmploymentData[];\n  loading: boolean;\n  error: string | null;\n  failures?: StateFailure[];\n  totalStates?: number;\n  successfulStates?: number;\n}\n\nexport interface WorkforceApiItem {\n  employeeCount: number;\n  state: string;\n  quarter: string;\n  sex: '0' | '1' | '2';\n  maleEmployment?: number;\n  femaleEmployment?: number;\n  failed?: boolean;\n  error?: string;\n}\n\nexport interface StateFailure {\n  state: string;\n  error: string;\n}\n\nexport interface WorkforceApiResponse {\n  data: WorkforceApiItem[];\n  failures: StateFailure[];\n  totalStates: number;\n  successfulStates: number;\n}\n\nexport const QUARTERS = [\n  '2023-Q4',\n  '2023-Q3',\n  '2023-Q2',\n  '2023-Q1',\n  '2022-Q4',\n  '2022-Q3',\n  '2022-Q2',\n  '2022-Q1',\n  '2021-Q4',\n  '2021-Q3',\n  '2021-Q2',\n  '2021-Q1',\n  '2020-Q4',\n  '2020-Q3',\n  '2020-Q2',\n  '2020-Q1',\n];\n\nexport const SEX_OPTIONS = [\n  { code: '0', name: 'All' },\n  { code: '1', name: 'Male' },\n  { code: '2', name: 'Female' }\n];\n\n"],"names":[],"mappings":";;;;AAiDO,MAAM,WAAW;IACtB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAEM,MAAM,cAAc;IACzB;QAAE,MAAM;QAAK,MAAM;IAAM;IACzB;QAAE,MAAM;QAAK,MAAM;IAAO;IAC1B;QAAE,MAAM;QAAK,MAAM;IAAS;CAC7B","debugId":null}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///home/davi/adp/apps/frontend/src/components/Select.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useRef, useEffect } from \"react\";\n\ninterface Option {\n  code: string;\n  name: string;\n}\n\ninterface SelectProps {\n  label: string;\n  options: Option[];\n  selectedValues: string[];\n  onChange: (values: string[]) => void;\n  placeholder?: string;\n  multiple?: boolean;\n}\n\nexport default function Select({\n  label,\n  options,\n  selectedValues,\n  onChange,\n  placeholder = \"Select option\",\n  multiple = false,\n}: SelectProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (\n        dropdownRef.current &&\n        !dropdownRef.current.contains(event.target as Node)\n      ) {\n        setIsOpen(false);\n      }\n    }\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n\n  const handleToggle = (value: string) => {\n    if (multiple) {\n      const newValues = selectedValues.includes(value)\n        ? selectedValues.filter((v) => v !== value)\n        : [...selectedValues, value];\n\n      onChange(newValues);\n    } else {\n      onChange([value]);\n      setIsOpen(false);\n    }\n  };\n\n  const getDisplayText = () => {\n    if (selectedValues.length === 0) {\n      return placeholder;\n    }\n    if (selectedValues.length === 1) {\n      const option = options.find((o) => o.code === selectedValues[0]);\n      return option?.name || placeholder;\n    }\n    return `${selectedValues.length} Selected`;\n  };\n\n  return (\n    <div className=\"relative\" ref={dropdownRef}>\n      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n        {label}\n      </label>\n      <button\n        type=\"button\"\n        className=\"relative w-full bg-white border border-gray-300 rounded-md px-3 py-2 text-left shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 h-10\"\n        onClick={() => setIsOpen(!isOpen)}\n      >\n        <span className=\"block truncate text-gray-900 pr-8\">{getDisplayText()}</span>\n        <span className=\"absolute inset-y-0 right-0 flex items-center justify-center w-8 pointer-events-none\">\n          <svg\n            className=\"h-5 w-5 text-gray-400\"\n            viewBox=\"0 0 20 20\"\n            fill=\"currentColor\"\n          >\n            <path\n              fillRule=\"evenodd\"\n              d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"\n              clipRule=\"evenodd\"\n            />\n          </svg>\n        </span>\n      </button>\n\n      {isOpen && (\n        <div className=\"absolute z-10 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none\">\n          {options.map((option) => (\n            <div\n              key={option.code}\n              className=\"relative cursor-pointer select-none py-2 pl-3 pr-9 hover:bg-gray-50\"\n              onClick={() => handleToggle(option.code)}\n            >\n              {multiple ? (\n                <div className=\"flex items-center pointer-events-none\">\n                  <input\n                    type=\"checkbox\"\n                    className=\"form-checkbox h-4 w-4 text-blue-600 rounded\"\n                    checked={selectedValues.includes(option.code)}\n                    readOnly\n                  />\n                  <span className=\"ml-2 text-gray-900\">{option.name}</span>\n                </div>\n              ) : (\n                <>\n                  <span\n                    className={`block truncate ${\n                      selectedValues.includes(option.code)\n                        ? \"font-medium text-blue-600\"\n                        : \"text-gray-900\"\n                    }`}\n                  >\n                    {option.name}\n                  </span>\n                  {selectedValues.includes(option.code) && (\n                    <span className=\"absolute inset-y-0 right-0 flex items-center pr-4 text-blue-600\">\n                      <svg\n                        className=\"h-5 w-5\"\n                        viewBox=\"0 0 20 20\"\n                        fill=\"currentColor\"\n                      >\n                        <path\n                          fillRule=\"evenodd\"\n                          d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                          clipRule=\"evenodd\"\n                        />\n                      </svg>\n                    </span>\n                  )}\n                </>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}"],"names":[],"mappings":";;;;AAEA;;;AAFA;;AAkBe,SAAS,OAAO,KAOjB;QAPiB,EAC7B,KAAK,EACL,OAAO,EACP,cAAc,EACd,QAAQ,EACR,cAAc,eAAe,EAC7B,WAAW,KAAK,EACJ,GAPiB;;IAQ7B,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACrC,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAkB;IAE3C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;4BAAE;YACR,SAAS,mBAAmB,KAAiB;gBAC3C,IACE,YAAY,OAAO,IACnB,CAAC,YAAY,OAAO,CAAC,QAAQ,CAAC,MAAM,MAAM,GAC1C;oBACA,UAAU;gBACZ;YACF;YAEA,SAAS,gBAAgB,CAAC,aAAa;YACvC;oCAAO,IAAM,SAAS,mBAAmB,CAAC,aAAa;;QACzD;2BAAG,EAAE;IAEL,MAAM,eAAe,CAAC;QACpB,IAAI,UAAU;YACZ,MAAM,YAAY,eAAe,QAAQ,CAAC,SACtC,eAAe,MAAM,CAAC,CAAC,IAAM,MAAM,SACnC;mBAAI;gBAAgB;aAAM;YAE9B,SAAS;QACX,OAAO;YACL,SAAS;gBAAC;aAAM;YAChB,UAAU;QACZ;IACF;IAEA,MAAM,iBAAiB;QACrB,IAAI,eAAe,MAAM,KAAK,GAAG;YAC/B,OAAO;QACT;QACA,IAAI,eAAe,MAAM,KAAK,GAAG;YAC/B,MAAM,SAAS,QAAQ,IAAI,CAAC,CAAC,IAAM,EAAE,IAAI,KAAK,cAAc,CAAC,EAAE;YAC/D,OAAO,CAAA,mBAAA,6BAAA,OAAQ,IAAI,KAAI;QACzB;QACA,OAAO,AAAC,GAAwB,OAAtB,eAAe,MAAM,EAAC;IAClC;IAEA,qBACE,6LAAC;QAAI,WAAU;QAAW,KAAK;;0BAC7B,6LAAC;gBAAM,WAAU;0BACd;;;;;;0BAEH,6LAAC;gBACC,MAAK;gBACL,WAAU;gBACV,SAAS,IAAM,UAAU,CAAC;;kCAE1B,6LAAC;wBAAK,WAAU;kCAAqC;;;;;;kCACrD,6LAAC;wBAAK,WAAU;kCACd,cAAA,6LAAC;4BACC,WAAU;4BACV,SAAQ;4BACR,MAAK;sCAEL,cAAA,6LAAC;gCACC,UAAS;gCACT,GAAE;gCACF,UAAS;;;;;;;;;;;;;;;;;;;;;;YAMhB,wBACC,6LAAC;gBAAI,WAAU;0BACZ,QAAQ,GAAG,CAAC,CAAC,uBACZ,6LAAC;wBAEC,WAAU;wBACV,SAAS,IAAM,aAAa,OAAO,IAAI;kCAEtC,yBACC,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCACC,MAAK;oCACL,WAAU;oCACV,SAAS,eAAe,QAAQ,CAAC,OAAO,IAAI;oCAC5C,QAAQ;;;;;;8CAEV,6LAAC;oCAAK,WAAU;8CAAsB,OAAO,IAAI;;;;;;;;;;;iDAGnD;;8CACE,6LAAC;oCACC,WAAW,AAAC,kBAIX,OAHC,eAAe,QAAQ,CAAC,OAAO,IAAI,IAC/B,8BACA;8CAGL,OAAO,IAAI;;;;;;gCAEb,eAAe,QAAQ,CAAC,OAAO,IAAI,mBAClC,6LAAC;oCAAK,WAAU;8CACd,cAAA,6LAAC;wCACC,WAAU;wCACV,SAAQ;wCACR,MAAK;kDAEL,cAAA,6LAAC;4CACC,UAAS;4CACT,GAAE;4CACF,UAAS;;;;;;;;;;;;;;;;;;uBAnChB,OAAO,IAAI;;;;;;;;;;;;;;;;AAgD9B;GA/HwB;KAAA","debugId":null}},
    {"offset": {"line": 340, "column": 0}, "map": {"version":3,"sources":["file:///home/davi/adp/apps/frontend/src/components/Filters.tsx"],"sourcesContent":["\"use client\";\n\nimport { FilterState, QUARTERS, SEX_OPTIONS } from \"@/types/census\";\nimport statesData from \"@/utils/constants/states.json\";\nimport Select from \"./Select\";\n\nconst { states } = statesData;\n\ninterface FiltersProps {\n  filters: FilterState;\n  onFiltersChange: (filters: FilterState) => void;\n}\n\nexport default function Filters({ filters, onFiltersChange }: FiltersProps) {\n  const quarterOptions = QUARTERS.map((quarter) => ({\n    code: quarter,\n    name: quarter,\n  }));\n\n  return (\n    <div className=\"bg-white p-6 rounded-lg shadow-md mb-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 items-end\">\n        <Select\n          label=\"State(s)\"\n          options={[{ code: \"ALL\", name: \"All States\" }, ...states]}\n          selectedValues={\n            filters.selectedStates.length === 0\n              ? [\"ALL\"]\n              : filters.selectedStates\n          }\n          onChange={(values) => {\n            if (\n              !filters.selectedStates.includes(\"ALL\") ===\n                values.includes(\"ALL\") ||\n              values.length === 0\n            ) {\n              onFiltersChange({ ...filters, selectedStates: [\"ALL\"] });\n              return;\n            }\n\n            const filteredValues = values.filter((v) => v !== \"ALL\");\n\n            onFiltersChange({ ...filters, selectedStates: filteredValues });\n          }}\n          placeholder=\"All States\"\n          multiple={true}\n        />\n\n        <Select\n          label=\"Quarter\"\n          options={quarterOptions}\n          selectedValues={[filters.selectedQuarter]}\n          onChange={(values) =>\n            onFiltersChange({ ...filters, selectedQuarter: values[0] })\n          }\n          placeholder=\"Select Quarter\"\n          multiple={false}\n        />\n\n        <div className=\"flex flex-col justify-end h-full\">\n          <label className=\"flex items-center h-10\">\n            <input\n              type=\"checkbox\"\n              className=\"form-checkbox h-4 w-4 text-blue-600 rounded mr-2\"\n              checked={filters.breakdownBySex}\n              onChange={(e) =>\n                onFiltersChange({\n                  ...filters,\n                  breakdownBySex: e.target.checked,\n                })\n              }\n            />\n            <span className=\"text-sm font-medium text-gray-700\">\n              Breakdown by Sex\n            </span>\n          </label>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAMA,MAAM,EAAE,MAAM,EAAE,GAAG,+HAAA,CAAA,UAAU;AAOd,SAAS,QAAQ,KAA0C;QAA1C,EAAE,OAAO,EAAE,eAAe,EAAgB,GAA1C;IAC9B,MAAM,iBAAiB,6IAAA,CAAA,WAAQ,CAAC,GAAG,CAAC,CAAC,UAAY,CAAC;YAChD,MAAM;YACN,MAAM;QACR,CAAC;IAED,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC,mJAAA,CAAA,UAAM;oBACL,OAAM;oBACN,SAAS;wBAAC;4BAAE,MAAM;4BAAO,MAAM;wBAAa;2BAAM;qBAAO;oBACzD,gBACE,QAAQ,cAAc,CAAC,MAAM,KAAK,IAC9B;wBAAC;qBAAM,GACP,QAAQ,cAAc;oBAE5B,UAAU,CAAC;wBACT,IACE,CAAC,QAAQ,cAAc,CAAC,QAAQ,CAAC,WAC/B,OAAO,QAAQ,CAAC,UAClB,OAAO,MAAM,KAAK,GAClB;4BACA,gBAAgB;gCAAE,GAAG,OAAO;gCAAE,gBAAgB;oCAAC;iCAAM;4BAAC;4BACtD;wBACF;wBAEA,MAAM,iBAAiB,OAAO,MAAM,CAAC,CAAC,IAAM,MAAM;wBAElD,gBAAgB;4BAAE,GAAG,OAAO;4BAAE,gBAAgB;wBAAe;oBAC/D;oBACA,aAAY;oBACZ,UAAU;;;;;;8BAGZ,6LAAC,mJAAA,CAAA,UAAM;oBACL,OAAM;oBACN,SAAS;oBACT,gBAAgB;wBAAC,QAAQ,eAAe;qBAAC;oBACzC,UAAU,CAAC,SACT,gBAAgB;4BAAE,GAAG,OAAO;4BAAE,iBAAiB,MAAM,CAAC,EAAE;wBAAC;oBAE3D,aAAY;oBACZ,UAAU;;;;;;8BAGZ,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBAAM,WAAU;;0CACf,6LAAC;gCACC,MAAK;gCACL,WAAU;gCACV,SAAS,QAAQ,cAAc;gCAC/B,UAAU,CAAC,IACT,gBAAgB;wCACd,GAAG,OAAO;wCACV,gBAAgB,EAAE,MAAM,CAAC,OAAO;oCAClC;;;;;;0CAGJ,6LAAC;gCAAK,WAAU;0CAAoC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQhE;KAnEwB","debugId":null}},
    {"offset": {"line": 477, "column": 0}, "map": {"version":3,"sources":["file:///home/davi/adp/apps/frontend/src/components/LoadingState.tsx"],"sourcesContent":["interface LoadingStateProps {\n  className?: string;\n}\n\nexport default function LoadingState({ className = \"bg-white rounded-lg shadow-md p-6\" }: LoadingStateProps) {\n  return (\n    <div className={className}>\n      <div className=\"animate-pulse\">\n        <div className=\"h-4 bg-gray-200 rounded w-1/4 mb-4\"></div>\n        <div className=\"space-y-3\">\n          {[...Array(5)].map((_, i) => (\n            <div key={i} className=\"h-4 bg-gray-200 rounded\"></div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":";;;;;AAIe,SAAS,aAAa,KAAsE;QAAtE,EAAE,YAAY,mCAAmC,EAAqB,GAAtE;IACnC,qBACE,6LAAC;QAAI,WAAW;kBACd,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAI,WAAU;;;;;;8BACf,6LAAC;oBAAI,WAAU;8BACZ;2BAAI,MAAM;qBAAG,CAAC,GAAG,CAAC,CAAC,GAAG,kBACrB,6LAAC;4BAAY,WAAU;2BAAb;;;;;;;;;;;;;;;;;;;;;AAMtB;KAbwB","debugId":null}},
    {"offset": {"line": 536, "column": 0}, "map": {"version":3,"sources":["file:///home/davi/adp/apps/frontend/src/components/ErrorState.tsx"],"sourcesContent":["interface ErrorStateProps {\n  error: string;\n  className?: string;\n}\n\nexport default function ErrorState({ error, className = \"bg-white rounded-lg shadow-md p-6\" }: ErrorStateProps) {\n  return (\n    <div className={className}>\n      <div className=\"text-center py-8\">\n        <svg className=\"mx-auto h-12 w-12 text-red-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n        </svg>\n        <h3 className=\"mt-2 text-sm font-medium text-gray-900\">Error loading data</h3>\n        <p className=\"mt-1 text-sm text-gray-500\">{error}</p>\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":";;;;;AAKe,SAAS,WAAW,KAA2E;QAA3E,EAAE,KAAK,EAAE,YAAY,mCAAmC,EAAmB,GAA3E;IACjC,qBACE,6LAAC;QAAI,WAAW;kBACd,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAI,WAAU;oBAAiC,MAAK;oBAAO,QAAO;oBAAe,SAAQ;8BACxF,cAAA,6LAAC;wBAAK,eAAc;wBAAQ,gBAAe;wBAAQ,aAAa;wBAAG,GAAE;;;;;;;;;;;8BAEvE,6LAAC;oBAAG,WAAU;8BAAyC;;;;;;8BACvD,6LAAC;oBAAE,WAAU;8BAA8B;;;;;;;;;;;;;;;;;AAInD;KAZwB","debugId":null}},
    {"offset": {"line": 608, "column": 0}, "map": {"version":3,"sources":["file:///home/davi/adp/apps/frontend/src/components/EmptyState.tsx"],"sourcesContent":["interface EmptyStateProps {\n  className?: string;\n}\n\nexport default function EmptyState({ className = \"bg-white rounded-lg shadow-md p-6\" }: EmptyStateProps) {\n  return (\n    <div className={className}>\n      <div className=\"text-center py-8\">\n        <svg className=\"mx-auto h-12 w-12 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n        </svg>\n        <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No data found</h3>\n        <p className=\"mt-1 text-sm text-gray-500\">Try adjusting your search criteria.</p>\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":";;;;;AAIe,SAAS,WAAW,KAAoE;QAApE,EAAE,YAAY,mCAAmC,EAAmB,GAApE;IACjC,qBACE,6LAAC;QAAI,WAAW;kBACd,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAI,WAAU;oBAAkC,MAAK;oBAAO,QAAO;oBAAe,SAAQ;8BACzF,cAAA,6LAAC;wBAAK,eAAc;wBAAQ,gBAAe;wBAAQ,aAAa;wBAAG,GAAE;;;;;;;;;;;8BAEvE,6LAAC;oBAAG,WAAU;8BAAyC;;;;;;8BACvD,6LAAC;oBAAE,WAAU;8BAA6B;;;;;;;;;;;;;;;;;AAIlD;KAZwB","debugId":null}},
    {"offset": {"line": 680, "column": 0}, "map": {"version":3,"sources":["file:///home/davi/adp/apps/frontend/src/components/SortIcon.tsx"],"sourcesContent":["type SortField = 'state' | 'totalEmployment' | 'maleEmployment' | 'femaleEmployment';\ntype SortDirection = 'asc' | 'desc';\n\ninterface SortIconProps {\n  field: SortField;\n  currentSortField: SortField;\n  sortDirection: SortDirection;\n}\n\nexport default function SortIcon({ field, currentSortField, sortDirection }: SortIconProps) {\n  if (currentSortField !== field) {\n    return (\n      <svg className=\"w-4 h-4 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 9l4-4 4 4m0 6l-4 4-4-4\" />\n      </svg>\n    );\n  }\n\n  return sortDirection === 'asc' ? (\n    <svg className=\"w-4 h-4 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 15l7-7 7 7\" />\n    </svg>\n  ) : (\n    <svg className=\"w-4 h-4 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n    </svg>\n  );\n}"],"names":[],"mappings":";;;;;AASe,SAAS,SAAS,KAAyD;QAAzD,EAAE,KAAK,EAAE,gBAAgB,EAAE,aAAa,EAAiB,GAAzD;IAC/B,IAAI,qBAAqB,OAAO;QAC9B,qBACE,6LAAC;YAAI,WAAU;YAAwB,MAAK;YAAO,QAAO;YAAe,SAAQ;sBAC/E,cAAA,6LAAC;gBAAK,eAAc;gBAAQ,gBAAe;gBAAQ,aAAa;gBAAG,GAAE;;;;;;;;;;;IAG3E;IAEA,OAAO,kBAAkB,sBACvB,6LAAC;QAAI,WAAU;QAAwB,MAAK;QAAO,QAAO;QAAe,SAAQ;kBAC/E,cAAA,6LAAC;YAAK,eAAc;YAAQ,gBAAe;YAAQ,aAAa;YAAG,GAAE;;;;;;;;;;6BAGvE,6LAAC;QAAI,WAAU;QAAwB,MAAK;QAAO,QAAO;QAAe,SAAQ;kBAC/E,cAAA,6LAAC;YAAK,eAAc;YAAQ,gBAAe;YAAQ,aAAa;YAAG,GAAE;;;;;;;;;;;AAG3E;KAlBwB","debugId":null}},
    {"offset": {"line": 761, "column": 0}, "map": {"version":3,"sources":["file:///home/davi/adp/apps/frontend/src/components/TableHeader.tsx"],"sourcesContent":["import SortIcon from './SortIcon';\n\ntype SortField = 'state' | 'totalEmployment' | 'maleEmployment' | 'femaleEmployment';\ntype SortDirection = 'asc' | 'desc';\n\ninterface TableHeaderProps {\n  showSexBreakdown: boolean;\n  sortField: SortField;\n  sortDirection: SortDirection;\n  onSort: (field: SortField) => void;\n}\n\nexport default function TableHeader({ showSexBreakdown, sortField, sortDirection, onSort }: TableHeaderProps) {\n  return (\n    <thead className=\"bg-gray-50\">\n      <tr>\n        <th\n          className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\n          onClick={() => onSort('state')}\n        >\n          <div className=\"flex items-center space-x-1\">\n            <span>State</span>\n            <SortIcon field=\"state\" currentSortField={sortField} sortDirection={sortDirection} />\n          </div>\n        </th>\n        {showSexBreakdown && (\n          <>\n            <th\n              className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\n              onClick={() => onSort('maleEmployment')}\n            >\n              <div className=\"flex items-center space-x-1\">\n                <span>Male</span>\n                <SortIcon field=\"maleEmployment\" currentSortField={sortField} sortDirection={sortDirection} />\n              </div>\n            </th>\n            <th\n              className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\n              onClick={() => onSort('femaleEmployment')}\n            >\n              <div className=\"flex items-center space-x-1\">\n                <span>Female</span>\n                <SortIcon field=\"femaleEmployment\" currentSortField={sortField} sortDirection={sortDirection} />\n              </div>\n            </th>\n          </>\n        )}\n        <th\n          className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\n          onClick={() => onSort('totalEmployment')}\n        >\n          <div className=\"flex items-center space-x-1\">\n            <span>Total Employment</span>\n            <SortIcon field=\"totalEmployment\" currentSortField={sortField} sortDirection={sortDirection} />\n          </div>\n        </th>\n      </tr>\n    </thead>\n  );\n}"],"names":[],"mappings":";;;;AAAA;;;AAYe,SAAS,YAAY,KAAwE;QAAxE,EAAE,gBAAgB,EAAE,SAAS,EAAE,aAAa,EAAE,MAAM,EAAoB,GAAxE;IAClC,qBACE,6LAAC;QAAM,WAAU;kBACf,cAAA,6LAAC;;8BACC,6LAAC;oBACC,WAAU;oBACV,SAAS,IAAM,OAAO;8BAEtB,cAAA,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;0CAAK;;;;;;0CACN,6LAAC,qJAAA,CAAA,UAAQ;gCAAC,OAAM;gCAAQ,kBAAkB;gCAAW,eAAe;;;;;;;;;;;;;;;;;gBAGvE,kCACC;;sCACE,6LAAC;4BACC,WAAU;4BACV,SAAS,IAAM,OAAO;sCAEtB,cAAA,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;kDAAK;;;;;;kDACN,6LAAC,qJAAA,CAAA,UAAQ;wCAAC,OAAM;wCAAiB,kBAAkB;wCAAW,eAAe;;;;;;;;;;;;;;;;;sCAGjF,6LAAC;4BACC,WAAU;4BACV,SAAS,IAAM,OAAO;sCAEtB,cAAA,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;kDAAK;;;;;;kDACN,6LAAC,qJAAA,CAAA,UAAQ;wCAAC,OAAM;wCAAmB,kBAAkB;wCAAW,eAAe;;;;;;;;;;;;;;;;;;;8BAKvF,6LAAC;oBACC,WAAU;oBACV,SAAS,IAAM,OAAO;8BAEtB,cAAA,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;0CAAK;;;;;;0CACN,6LAAC,qJAAA,CAAA,UAAQ;gCAAC,OAAM;gCAAkB,kBAAkB;gCAAW,eAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAM1F;KA/CwB","debugId":null}},
    {"offset": {"line": 934, "column": 0}, "map": {"version":3,"sources":["file:///home/davi/adp/apps/frontend/src/components/TableRow.tsx"],"sourcesContent":["import { EmploymentData } from '@/types/census';\n\ninterface TableRowProps {\n  row: EmploymentData;\n  index: number;\n  showSexBreakdown: boolean;\n  formatNumber: (num: number) => string;\n}\n\nexport default function TableRow({ row, index, showSexBreakdown, formatNumber }: TableRowProps) {\n  return (\n    <tr key={`${row.stateCode}-${index}`} className={`hover:bg-gray-50 ${row.failed ? 'bg-red-50' : ''}`}>\n      <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n        <div className=\"flex items-center space-x-2\">\n          <span className={row.failed ? 'text-red-600' : ''}>{row.state}</span>\n          {row.failed && (\n            <svg className=\"w-4 h-4 text-red-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n            </svg>\n          )}\n        </div>\n        {row.failed && row.error && (\n          <div className=\"text-xs text-red-500 mt-1\">{row.error}</div>\n        )}\n      </td>\n      {showSexBreakdown && (\n        <>\n          <td className={`px-6 py-4 whitespace-nowrap text-sm ${row.failed ? 'text-red-400' : 'text-gray-900'}`}>\n            {row.failed ? 'Failed' : (row.maleEmployment ? formatNumber(row.maleEmployment) : 'N/A')}\n          </td>\n          <td className={`px-6 py-4 whitespace-nowrap text-sm ${row.failed ? 'text-red-400' : 'text-gray-900'}`}>\n            {row.failed ? 'Failed' : (row.femaleEmployment ? formatNumber(row.femaleEmployment) : 'N/A')}\n          </td>\n        </>\n      )}\n      <td className={`px-6 py-4 whitespace-nowrap text-sm ${row.failed ? 'text-red-400' : 'text-gray-900'}`}>\n        {row.failed ? 'Failed' : formatNumber(row.totalEmployment)}\n      </td>\n    </tr>\n  );\n}"],"names":[],"mappings":";;;;;AASe,SAAS,SAAS,KAA6D;QAA7D,EAAE,GAAG,EAAE,KAAK,EAAE,gBAAgB,EAAE,YAAY,EAAiB,GAA7D;IAC/B,qBACE,6LAAC;QAAqC,WAAW,AAAC,oBAAiD,OAA9B,IAAI,MAAM,GAAG,cAAc;;0BAC9F,6LAAC;gBAAG,WAAU;;kCACZ,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAK,WAAW,IAAI,MAAM,GAAG,iBAAiB;0CAAK,IAAI,KAAK;;;;;;4BAC5D,IAAI,MAAM,kBACT,6LAAC;gCAAI,WAAU;gCAAuB,MAAK;gCAAe,SAAQ;0CAChE,cAAA,6LAAC;oCAAK,UAAS;oCAAU,GAAE;oCAAoH,UAAS;;;;;;;;;;;;;;;;;oBAI7J,IAAI,MAAM,IAAI,IAAI,KAAK,kBACtB,6LAAC;wBAAI,WAAU;kCAA6B,IAAI,KAAK;;;;;;;;;;;;YAGxD,kCACC;;kCACE,6LAAC;wBAAG,WAAW,AAAC,uCAAoF,OAA9C,IAAI,MAAM,GAAG,iBAAiB;kCACjF,IAAI,MAAM,GAAG,WAAY,IAAI,cAAc,GAAG,aAAa,IAAI,cAAc,IAAI;;;;;;kCAEpF,6LAAC;wBAAG,WAAW,AAAC,uCAAoF,OAA9C,IAAI,MAAM,GAAG,iBAAiB;kCACjF,IAAI,MAAM,GAAG,WAAY,IAAI,gBAAgB,GAAG,aAAa,IAAI,gBAAgB,IAAI;;;;;;;;0BAI5F,6LAAC;gBAAG,WAAW,AAAC,uCAAoF,OAA9C,IAAI,MAAM,GAAG,iBAAiB;0BACjF,IAAI,MAAM,GAAG,WAAW,aAAa,IAAI,eAAe;;;;;;;OAzBpD,AAAC,GAAmB,OAAjB,IAAI,SAAS,EAAC,KAAS,OAAN;;;;;AA6BjC;KA/BwB","debugId":null}},
    {"offset": {"line": 1043, "column": 0}, "map": {"version":3,"sources":["file:///home/davi/adp/apps/frontend/src/components/EmploymentTable.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport { EmploymentData, StateFailure } from \"@/types/census\";\nimport LoadingState from \"./LoadingState\";\nimport ErrorState from \"./ErrorState\";\nimport EmptyState from \"./EmptyState\";\nimport TableHeader from \"./TableHeader\";\nimport TableRow from \"./TableRow\";\n\ninterface EmploymentTableProps {\n  data: EmploymentData[];\n  showSexBreakdown: boolean;\n  loading: boolean;\n  error: string | null;\n  failures?: StateFailure[];\n  totalStates?: number;\n  successfulStates?: number;\n}\n\ntype SortField =\n  | \"state\"\n  | \"totalEmployment\"\n  | \"maleEmployment\"\n  | \"femaleEmployment\";\ntype SortDirection = \"asc\" | \"desc\";\n\nexport default function EmploymentTable({\n  data,\n  showSexBreakdown,\n  loading,\n  error,\n  failures = [],\n  totalStates = 0,\n  successfulStates = 0,\n}: EmploymentTableProps) {\n  const [sortField, setSortField] = useState<SortField>(\"state\");\n  const [sortDirection, setSortDirection] = useState<SortDirection>(\"asc\");\n\n  const handleSort = (field: SortField) => {\n    if (field === sortField) {\n      setSortDirection(sortDirection === \"asc\" ? \"desc\" : \"asc\");\n    } else {\n      setSortField(field);\n      setSortDirection(\"asc\");\n    }\n  };\n\n  const sortedData = [...data].sort((a, b) => {\n    let aValue: string | number;\n    let bValue: string | number;\n\n    switch (sortField) {\n      case \"state\":\n        aValue = a.state;\n        bValue = b.state;\n        break;\n      case \"totalEmployment\":\n        aValue = a.totalEmployment;\n        bValue = b.totalEmployment;\n        break;\n      case \"maleEmployment\":\n        aValue = a.maleEmployment || 0;\n        bValue = b.maleEmployment || 0;\n        break;\n      case \"femaleEmployment\":\n        aValue = a.femaleEmployment || 0;\n        bValue = b.femaleEmployment || 0;\n        break;\n      default:\n        aValue = a.state;\n        bValue = b.state;\n    }\n\n    if (typeof aValue === \"string\" && typeof bValue === \"string\") {\n      const comparison = aValue.localeCompare(bValue);\n      return sortDirection === \"asc\" ? comparison : -comparison;\n    }\n\n    const comparison = (aValue as number) - (bValue as number);\n    return sortDirection === \"asc\" ? comparison : -comparison;\n  });\n\n  const formatNumber = (num: number) => {\n    return num.toLocaleString();\n  };\n\n  if (loading) {\n    return <LoadingState />;\n  }\n\n  if (error) {\n    return <ErrorState error={error} />;\n  }\n\n  if (data.length === 0) {\n    return <EmptyState />;\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n        <div className=\"overflow-x-auto max-h-[70vh]\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <TableHeader\n              showSexBreakdown={showSexBreakdown}\n              sortField={sortField}\n              sortDirection={sortDirection}\n              onSort={handleSort}\n            />\n          </table>\n        </div>\n        <div className=\"overflow-x-auto overflow-y-auto max-h-[60vh]\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {sortedData.map((row, index) => (\n                <TableRow\n                  key={`${row.stateCode}-${index}`}\n                  row={row}\n                  index={index}\n                  showSexBreakdown={showSexBreakdown}\n                  formatNumber={formatNumber}\n                />\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AAEA;AACA;AACA;AACA;AACA;;;AARA;;;;;;;AA2Be,SAAS,gBAAgB,KAQjB;QARiB,EACtC,IAAI,EACJ,gBAAgB,EAChB,OAAO,EACP,KAAK,EACL,WAAW,EAAE,EACb,cAAc,CAAC,EACf,mBAAmB,CAAC,EACC,GARiB;;IAStC,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAa;IACtD,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAElE,MAAM,aAAa,CAAC;QAClB,IAAI,UAAU,WAAW;YACvB,iBAAiB,kBAAkB,QAAQ,SAAS;QACtD,OAAO;YACL,aAAa;YACb,iBAAiB;QACnB;IACF;IAEA,MAAM,aAAa;WAAI;KAAK,CAAC,IAAI,CAAC,CAAC,GAAG;QACpC,IAAI;QACJ,IAAI;QAEJ,OAAQ;YACN,KAAK;gBACH,SAAS,EAAE,KAAK;gBAChB,SAAS,EAAE,KAAK;gBAChB;YACF,KAAK;gBACH,SAAS,EAAE,eAAe;gBAC1B,SAAS,EAAE,eAAe;gBAC1B;YACF,KAAK;gBACH,SAAS,EAAE,cAAc,IAAI;gBAC7B,SAAS,EAAE,cAAc,IAAI;gBAC7B;YACF,KAAK;gBACH,SAAS,EAAE,gBAAgB,IAAI;gBAC/B,SAAS,EAAE,gBAAgB,IAAI;gBAC/B;YACF;gBACE,SAAS,EAAE,KAAK;gBAChB,SAAS,EAAE,KAAK;QACpB;QAEA,IAAI,OAAO,WAAW,YAAY,OAAO,WAAW,UAAU;YAC5D,MAAM,aAAa,OAAO,aAAa,CAAC;YACxC,OAAO,kBAAkB,QAAQ,aAAa,CAAC;QACjD;QAEA,MAAM,aAAa,AAAC,SAAqB;QACzC,OAAO,kBAAkB,QAAQ,aAAa,CAAC;IACjD;IAEA,MAAM,eAAe,CAAC;QACpB,OAAO,IAAI,cAAc;IAC3B;IAEA,IAAI,SAAS;QACX,qBAAO,6LAAC,yJAAA,CAAA,UAAY;;;;;IACtB;IAEA,IAAI,OAAO;QACT,qBAAO,6LAAC,uJAAA,CAAA,UAAU;YAAC,OAAO;;;;;;IAC5B;IAEA,IAAI,KAAK,MAAM,KAAK,GAAG;QACrB,qBAAO,6LAAC,uJAAA,CAAA,UAAU;;;;;IACpB;IAEA,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBAAM,WAAU;kCACf,cAAA,6LAAC,wJAAA,CAAA,UAAW;4BACV,kBAAkB;4BAClB,WAAW;4BACX,eAAe;4BACf,QAAQ;;;;;;;;;;;;;;;;8BAId,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBAAM,WAAU;kCACf,cAAA,6LAAC;4BAAM,WAAU;sCACd,WAAW,GAAG,CAAC,CAAC,KAAK,sBACpB,6LAAC,qJAAA,CAAA,UAAQ;oCAEP,KAAK;oCACL,OAAO;oCACP,kBAAkB;oCAClB,cAAc;mCAJT,AAAC,GAAmB,OAAjB,IAAI,SAAS,EAAC,KAAS,OAAN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAa3C;GAvGwB;KAAA","debugId":null}},
    {"offset": {"line": 1219, "column": 0}, "map": {"version":3,"sources":["file:///home/davi/adp/apps/frontend/src/actions/census.ts"],"sourcesContent":["\"use server\";\n\nimport { EmploymentData, FilterState, StateFailure } from \"@/types/census\";\nimport { getWorkforceData } from \"@/services/api\";\n\nexport async function fetchEmploymentData(filters: FilterState): Promise<{\n  data: EmploymentData[];\n  failures: StateFailure[];\n  totalStates: number;\n  successfulStates: number;\n}> {\n  try {\n    if (filters.breakdownBySex && filters.selectedStates.length > 1) {\n      const promises = filters.selectedStates.map((state) =>\n        getWorkforceData({\n          ...filters,\n          selectedStates: [state],\n        })\n      );\n\n      const results = await Promise.all(promises);\n      const allFailures = results.flatMap((result) => result.failures || []);\n      const totalStates = results.reduce(\n        (sum, result) => sum + (result.totalStates || 0),\n        0\n      );\n      const successfulStates = results.reduce(\n        (sum, result) => sum + (result.successfulStates || 0),\n        0\n      );\n\n      return {\n        data: results.flatMap((result) =>\n          result.data.map((item) => ({\n            state: item.state,\n            stateCode: item.state,\n            totalEmployment: item.employeeCount,\n            maleEmployment: item.maleEmployment,\n            femaleEmployment: item.femaleEmployment,\n            failed: item.failed,\n            error: item.error,\n          }))\n        ),\n        failures: allFailures,\n        totalStates,\n        successfulStates,\n      };\n    }\n\n    const result = await getWorkforceData(filters);\n    return {\n      data: result.data.map((item) => ({\n        state: item.state,\n        stateCode: item.state,\n        totalEmployment: item.employeeCount,\n        maleEmployment: item.maleEmployment,\n        femaleEmployment: item.femaleEmployment,\n        failed: item.failed,\n        error: item.error,\n      })),\n      failures: result.failures || [],\n      totalStates: result.totalStates || 0,\n      successfulStates: result.successfulStates || 0,\n    };\n  } catch (error) {\n    console.error(\"Error fetching employment data:\", error);\n    throw new Error(\n      error instanceof Error\n        ? error.message\n        : \"An error occurred while fetching data\"\n    );\n  }\n}\n"],"names":[],"mappings":";;;;;;IAKsB,sBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 1235, "column": 0}, "map": {"version":3,"sources":["file:///home/davi/adp/apps/frontend/src/hooks/useEmploymentData.ts"],"sourcesContent":["'use client';\n\nimport { useQuery } from '@tanstack/react-query';\nimport { FilterState } from '@/types/census';\nimport { fetchEmploymentData as fetchEmploymentDataAction } from '@/actions/census';\n\nexport function useEmploymentData(filters: FilterState) {\n  const {\n    data: result,\n    isLoading,\n    error,\n    refetch,\n  } = useQuery({\n    queryKey: ['employmentData', filters],\n    queryFn: () => fetchEmploymentDataAction(filters),\n    enabled: true,\n    staleTime: 0,\n    refetchOnMount: false,\n    refetchOnWindowFocus: false,\n  });\n\n  return {\n    data: result?.data || [],\n    loading: isLoading,\n    error: error?.message || null,\n    failures: result?.failures || [],\n    totalStates: result?.totalStates || 0,\n    successfulStates: result?.successfulStates || 0,\n    fetchEmploymentData: refetch,\n  };\n}"],"names":[],"mappings":";;;AAEA;AAEA;;AAJA;;;AAMO,SAAS,kBAAkB,OAAoB;;IACpD,MAAM,EACJ,MAAM,MAAM,EACZ,SAAS,EACT,KAAK,EACL,OAAO,EACR,GAAG,CAAA,GAAA,8KAAA,CAAA,WAAQ,AAAD,EAAE;QACX,UAAU;YAAC;YAAkB;SAAQ;QACrC,OAAO;0CAAE,IAAM,CAAA,GAAA,6KAAA,CAAA,sBAAyB,AAAD,EAAE;;QACzC,SAAS;QACT,WAAW;QACX,gBAAgB;QAChB,sBAAsB;IACxB;IAEA,OAAO;QACL,MAAM,CAAA,mBAAA,6BAAA,OAAQ,IAAI,KAAI,EAAE;QACxB,SAAS;QACT,OAAO,CAAA,kBAAA,4BAAA,MAAO,OAAO,KAAI;QACzB,UAAU,CAAA,mBAAA,6BAAA,OAAQ,QAAQ,KAAI,EAAE;QAChC,aAAa,CAAA,mBAAA,6BAAA,OAAQ,WAAW,KAAI;QACpC,kBAAkB,CAAA,mBAAA,6BAAA,OAAQ,gBAAgB,KAAI;QAC9C,qBAAqB;IACvB;AACF;GAxBgB;;QAMV,8KAAA,CAAA,WAAQ","debugId":null}},
    {"offset": {"line": 1283, "column": 0}, "map": {"version":3,"sources":["file:///home/davi/adp/apps/frontend/src/screens/WorkforceStats.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport Header from \"@/components/Header\";\nimport Filters from \"@/components/Filters\";\nimport EmploymentTable from \"@/components/EmploymentTable\";\nimport { useEmploymentData } from \"@/hooks/useEmploymentData\";\nimport { FilterState } from \"@/types/census\";\n\nexport default function WorkforceStats() {\n  const [filters, setFilters] = useState<FilterState>({\n    selectedStates: [\"ALL\"],\n    selectedQuarter: \"2023-Q4\",\n    selectedSex: [],\n    breakdownBySex: false,\n  });\n\n  const {\n    data,\n    loading,\n    error,\n    failures,\n    totalStates,\n    successfulStates,\n  } = useEmploymentData(filters);\n\n  return (\n    <>\n      <Header\n        selectedQuarter={filters.selectedQuarter}\n        selectedStates={filters.selectedStates}\n      />\n\n      <Filters\n        filters={filters}\n        onFiltersChange={setFilters}\n      />\n\n      <EmploymentTable\n        data={data}\n        showSexBreakdown={filters.breakdownBySex}\n        loading={loading}\n        error={error}\n        failures={failures}\n        totalStates={totalStates}\n        successfulStates={successfulStates}\n      />\n    </>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;;;AANA;;;;;;AASe,SAAS;;IACtB,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAe;QAClD,gBAAgB;YAAC;SAAM;QACvB,iBAAiB;QACjB,aAAa,EAAE;QACf,gBAAgB;IAClB;IAEA,MAAM,EACJ,IAAI,EACJ,OAAO,EACP,KAAK,EACL,QAAQ,EACR,WAAW,EACX,gBAAgB,EACjB,GAAG,CAAA,GAAA,wJAAA,CAAA,oBAAiB,AAAD,EAAE;IAEtB,qBACE;;0BACE,6LAAC,mJAAA,CAAA,UAAM;gBACL,iBAAiB,QAAQ,eAAe;gBACxC,gBAAgB,QAAQ,cAAc;;;;;;0BAGxC,6LAAC,oJAAA,CAAA,UAAO;gBACN,SAAS;gBACT,iBAAiB;;;;;;0BAGnB,6LAAC,4JAAA,CAAA,UAAe;gBACd,MAAM;gBACN,kBAAkB,QAAQ,cAAc;gBACxC,SAAS;gBACT,OAAO;gBACP,UAAU;gBACV,aAAa;gBACb,kBAAkB;;;;;;;;AAI1B;GAxCwB;;QAelB,wJAAA,CAAA,oBAAiB;;;KAfC","debugId":null}},
    {"offset": {"line": 1360, "column": 0}, "map": {"version":3,"sources":["file:///home/davi/adp/node_modules/%40tanstack/query-core/src/queryObserver.ts"],"sourcesContent":["import { focusManager } from './focusManager'\nimport { notifyManager } from './notifyManager'\nimport { fetchState } from './query'\nimport { Subscribable } from './subscribable'\nimport { pendingThenable } from './thenable'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  resolveEnabled,\n  resolveStaleTime,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport type { FetchOptions, Query, QueryState } from './query'\nimport type { QueryClient } from './queryClient'\nimport type { PendingThenable, Thenable } from './thenable'\nimport type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\ninterface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  #client: QueryClient\n  #currentQuery: Query<TQueryFnData, TError, TQueryData, TQueryKey> = undefined!\n  #currentQueryInitialState: QueryState<TQueryData, TError> = undefined!\n  #currentResult: QueryObserverResult<TData, TError> = undefined!\n  #currentResultState?: QueryState<TQueryData, TError>\n  #currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  #currentThenable: Thenable<TData>\n  #selectError: TError | null\n  #selectFn?: (data: TQueryData) => TData\n  #selectResult?: TData\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData?: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  #staleTimeoutId?: ReturnType<typeof setTimeout>\n  #refetchIntervalId?: ReturnType<typeof setInterval>\n  #currentRefetchInterval?: number | false\n  #trackedProps = new Set<keyof QueryObserverResult>()\n\n  constructor(\n    client: QueryClient,\n    public options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.#client = client\n    this.#selectError = null\n    this.#currentThenable = pendingThenable()\n    if (!this.options.experimental_prefetchInRender) {\n      this.#currentThenable.reject(\n        new Error('experimental_prefetchInRender feature flag is not enabled'),\n      )\n    }\n\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch()\n      } else {\n        this.updateResult()\n      }\n\n      this.#updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#clearStaleTimeout()\n    this.#clearRefetchInterval()\n    this.#currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.#currentQuery\n\n    this.options = this.#client.defaultQueryOptions(options)\n\n    if (\n      this.options.enabled !== undefined &&\n      typeof this.options.enabled !== 'boolean' &&\n      typeof this.options.enabled !== 'function' &&\n      typeof resolveEnabled(this.options.enabled, this.#currentQuery) !==\n        'boolean'\n    ) {\n      throw new Error(\n        'Expected enabled to be a boolean or a callback that returns a boolean',\n      )\n    }\n\n    this.#updateQuery()\n    this.#currentQuery.setOptions(this.options)\n\n    if (\n      prevOptions._defaulted &&\n      !shallowEqualObjects(this.options, prevOptions)\n    ) {\n      this.#client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.#currentQuery,\n        observer: this,\n      })\n    }\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.#currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.#executeFetch()\n    }\n\n    // Update result\n    this.updateResult()\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        resolveEnabled(this.options.enabled, this.#currentQuery) !==\n          resolveEnabled(prevOptions.enabled, this.#currentQuery) ||\n        resolveStaleTime(this.options.staleTime, this.#currentQuery) !==\n          resolveStaleTime(prevOptions.staleTime, this.#currentQuery))\n    ) {\n      this.#updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.#computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        resolveEnabled(this.options.enabled, this.#currentQuery) !==\n          resolveEnabled(prevOptions.enabled, this.#currentQuery) ||\n        nextRefetchInterval !== this.#currentRefetchInterval)\n    ) {\n      this.#updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.#client.getQueryCache().build(this.#client, options)\n\n    const result = this.createResult(query, options)\n\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult every time\n      // an observer reads an optimistic value.\n\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.#currentResult = result\n      this.#currentResultOptions = this.options\n      this.#currentResultState = this.#currentQuery.state\n    }\n    return result\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.#currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n    onPropTracked?: (key: keyof QueryObserverResult) => void,\n  ): QueryObserverResult<TData, TError> {\n    return new Proxy(result, {\n      get: (target, key) => {\n        this.trackProp(key as keyof QueryObserverResult)\n        onPropTracked?.(key as keyof QueryObserverResult)\n        return Reflect.get(target, key)\n      },\n    })\n  }\n\n  trackProp(key: keyof QueryObserverResult) {\n    this.#trackedProps.add(key)\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.#currentQuery\n  }\n\n  refetch({ ...options }: RefetchOptions = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.#client.defaultQueryOptions(options)\n\n    const query = this.#client\n      .getQueryCache()\n      .build(this.#client, defaultedOptions)\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.#currentResult\n    })\n  }\n\n  #executeFetch(\n    fetchOptions?: Omit<ObserverFetchOptions, 'initialPromise'>,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.#updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.#currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  #updateStaleTimeout(): void {\n    this.#clearStaleTimeout()\n    const staleTime = resolveStaleTime(\n      this.options.staleTime,\n      this.#currentQuery,\n    )\n\n    if (isServer || this.#currentResult.isStale || !isValidTimeout(staleTime)) {\n      return\n    }\n\n    const time = timeUntilStale(this.#currentResult.dataUpdatedAt, staleTime)\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.#staleTimeoutId = setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  #computeRefetchInterval() {\n    return (\n      (typeof this.options.refetchInterval === 'function'\n        ? this.options.refetchInterval(this.#currentQuery)\n        : this.options.refetchInterval) ?? false\n    )\n  }\n\n  #updateRefetchInterval(nextInterval: number | false): void {\n    this.#clearRefetchInterval()\n\n    this.#currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      resolveEnabled(this.options.enabled, this.#currentQuery) === false ||\n      !isValidTimeout(this.#currentRefetchInterval) ||\n      this.#currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.#refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.#executeFetch()\n      }\n    }, this.#currentRefetchInterval)\n  }\n\n  #updateTimers(): void {\n    this.#updateStaleTimeout()\n    this.#updateRefetchInterval(this.#computeRefetchInterval())\n  }\n\n  #clearStaleTimeout(): void {\n    if (this.#staleTimeoutId) {\n      clearTimeout(this.#staleTimeoutId)\n      this.#staleTimeoutId = undefined\n    }\n  }\n\n  #clearRefetchInterval(): void {\n    if (this.#refetchIntervalId) {\n      clearInterval(this.#refetchIntervalId)\n      this.#refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.#currentQuery\n    const prevOptions = this.options\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.#currentResultState\n    const prevResultOptions = this.#currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.#currentQueryInitialState\n\n    const { state } = query\n    let newState = { ...state }\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        newState = {\n          ...newState,\n          ...fetchState(state.data, query.options),\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        newState.fetchStatus = 'idle'\n      }\n    }\n\n    let { error, errorUpdatedAt, status } = newState\n\n    // Per default, use query data\n    data = newState.data as unknown as TData\n    let skipSelect = false\n\n    // use placeholderData if needed\n    if (\n      options.placeholderData !== undefined &&\n      data === undefined &&\n      status === 'pending'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n        // we have to skip select when reading this memoization\n        // because prevResult.data is already \"selected\"\n        skipSelect = true\n      } else {\n        // compute placeholderData\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (\n                options.placeholderData as unknown as PlaceholderDataFunction<TQueryData>\n              )(\n                this.#lastQueryWithDefinedData?.state.data,\n                this.#lastQueryWithDefinedData as any,\n              )\n            : options.placeholderData\n      }\n\n      if (placeholderData !== undefined) {\n        status = 'success'\n        data = replaceData(\n          prevResult?.data,\n          placeholderData as unknown,\n          options,\n        ) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    // Select data if needed\n    // this also runs placeholderData through the select function\n    if (options.select && data !== undefined && !skipSelect) {\n      // Memoize select result\n      if (\n        prevResult &&\n        data === prevResultState?.data &&\n        options.select === this.#selectFn\n      ) {\n        data = this.#selectResult\n      } else {\n        try {\n          this.#selectFn = options.select\n          data = options.select(data as any)\n          data = replaceData(prevResult?.data, data, options)\n          this.#selectResult = data\n          this.#selectError = null\n        } catch (selectError) {\n          this.#selectError = selectError as TError\n        }\n      }\n    }\n\n    if (this.#selectError) {\n      error = this.#selectError as any\n      data = this.#selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = newState.fetchStatus === 'fetching'\n    const isPending = status === 'pending'\n    const isError = status === 'error'\n\n    const isLoading = isPending && isFetching\n    const hasData = data !== undefined\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus: newState.fetchStatus,\n      isPending,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: newState.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: newState.fetchFailureCount,\n      failureReason: newState.fetchFailureReason,\n      errorUpdateCount: newState.errorUpdateCount,\n      isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        newState.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        newState.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && !hasData,\n      isPaused: newState.fetchStatus === 'paused',\n      isPlaceholderData,\n      isRefetchError: isError && hasData,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      promise: this.#currentThenable,\n      isEnabled: resolveEnabled(options.enabled, query) !== false,\n    }\n\n    const nextResult = result as QueryObserverResult<TData, TError>\n\n    if (this.options.experimental_prefetchInRender) {\n      const finalizeThenableIfPossible = (thenable: PendingThenable<TData>) => {\n        if (nextResult.status === 'error') {\n          thenable.reject(nextResult.error)\n        } else if (nextResult.data !== undefined) {\n          thenable.resolve(nextResult.data)\n        }\n      }\n\n      /**\n       * Create a new thenable and result promise when the results have changed\n       */\n      const recreateThenable = () => {\n        const pending =\n          (this.#currentThenable =\n          nextResult.promise =\n            pendingThenable())\n\n        finalizeThenableIfPossible(pending)\n      }\n\n      const prevThenable = this.#currentThenable\n      switch (prevThenable.status) {\n        case 'pending':\n          // Finalize the previous thenable if it was pending\n          // and we are still observing the same query\n          if (query.queryHash === prevQuery.queryHash) {\n            finalizeThenableIfPossible(prevThenable)\n          }\n          break\n        case 'fulfilled':\n          if (\n            nextResult.status === 'error' ||\n            nextResult.data !== prevThenable.value\n          ) {\n            recreateThenable()\n          }\n          break\n        case 'rejected':\n          if (\n            nextResult.status !== 'error' ||\n            nextResult.error !== prevThenable.reason\n          ) {\n            recreateThenable()\n          }\n          break\n      }\n    }\n\n    return nextResult\n  }\n\n  updateResult(): void {\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.#currentQuery, this.options)\n\n    this.#currentResultState = this.#currentQuery.state\n    this.#currentResultOptions = this.options\n\n    if (this.#currentResultState.data !== undefined) {\n      this.#lastQueryWithDefinedData = this.#currentQuery\n    }\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.#currentResult = nextResult\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n      const notifyOnChangePropsValue =\n        typeof notifyOnChangeProps === 'function'\n          ? notifyOnChangeProps()\n          : notifyOnChangeProps\n\n      if (\n        notifyOnChangePropsValue === 'all' ||\n        (!notifyOnChangePropsValue && !this.#trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.#trackedProps,\n      )\n\n      if (this.options.throwOnError) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.#currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey]\n\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    this.#notify({ listeners: shouldNotifyListeners() })\n  }\n\n  #updateQuery(): void {\n    const query = this.#client.getQueryCache().build(this.#client, this.options)\n\n    if (query === this.#currentQuery) {\n      return\n    }\n\n    const prevQuery = this.#currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.#currentQuery = query\n    this.#currentQueryInitialState = query.state\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(): void {\n    this.updateResult()\n\n    if (this.hasListeners()) {\n      this.#updateTimers()\n    }\n  }\n\n  #notify(notifyOptions: { listeners: boolean }): void {\n    notifyManager.batch(() => {\n      // First, trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.#currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: 'observerResultsUpdated',\n      })\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    resolveEnabled(options.enabled, query) !== false &&\n    query.state.data === undefined &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.data !== undefined &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: (typeof options)['refetchOnMount'] &\n    (typeof options)['refetchOnWindowFocus'] &\n    (typeof options)['refetchOnReconnect'],\n) {\n  if (\n    resolveEnabled(options.enabled, query) !== false &&\n    resolveStaleTime(options.staleTime, query) !== 'static'\n  ) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    (query !== prevQuery ||\n      resolveEnabled(prevOptions.enabled, query) === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    resolveEnabled(options.enabled, query) !== false &&\n    query.isStaleByTime(resolveStaleTime(options.staleTime, query))\n  )\n}\n\n// this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\nfunction shouldAssignObserverCurrentProperties<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  optimisticResult: QueryObserverResult<TData, TError>,\n) {\n  // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true\n  }\n\n  // basically, just keep previous properties if nothing changed\n  return false\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1843, "column": 0}, "map": {"version":3,"sources":["file:///home/davi/adp/node_modules/%40tanstack/react-query/src/QueryErrorResetBoundary.tsx"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\n// CONTEXT\nexport type QueryErrorResetFunction = () => void\nexport type QueryErrorIsResetFunction = () => boolean\nexport type QueryErrorClearResetFunction = () => void\n\nexport interface QueryErrorResetBoundaryValue {\n  clearReset: QueryErrorClearResetFunction\n  isReset: QueryErrorIsResetFunction\n  reset: QueryErrorResetFunction\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport type QueryErrorResetBoundaryFunction = (\n  value: QueryErrorResetBoundaryValue,\n) => React.ReactNode\n\nexport interface QueryErrorResetBoundaryProps {\n  children: QueryErrorResetBoundaryFunction | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary = ({\n  children,\n}: QueryErrorResetBoundaryProps) => {\n  const [value] = React.useState(() => createValue())\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function' ? children(value) : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n"],"names":[],"mappings":";;;;;AACA,YAAY,WAAW;AAkDnB;;;;AArCJ,SAAS,cAA4C;IACnD,IAAI,UAAU;IACd,OAAO;QACL,YAAY,MAAM;YAChB,UAAU;QACZ;QACA,OAAO,MAAM;YACX,UAAU;QACZ;QACA,SAAS,MAAM;YACb,OAAO;QACT;IACF;AACF;AAEA,IAAM,+LAAuC,gBAAA,CAAc,YAAY,CAAC;AAIjE,IAAM,6BAA6B,kKAClC,aAAA,CAAW,8BAA8B;AAY1C,IAAM,0BAA0B;QAAC,EACtC,QAAA,EACF,KAAoC;IAClC,MAAM,CAAC,KAAK,CAAA,iKAAU,WAAA;4CAAS,IAAM,YAAY,CAAC;;IAClD,OACE,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,EAAC,+BAA+B,QAAA,EAA/B;QAAwC;QACtC,UAAA,OAAO,aAAa,aAAa,SAAS,KAAK,IAAI;IAAA,CACtD;AAEJ","debugId":null}},
    {"offset": {"line": 1885, "column": 0}, "map": {"version":3,"sources":["file:///home/davi/adp/node_modules/%40tanstack/react-query/src/errorBoundaryUtils.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\nimport { shouldThrowError } from '@tanstack/query-core'\nimport type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  ThrowOnError,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (\n    options.suspense ||\n    options.throwOnError ||\n    options.experimental_prefetchInRender\n  ) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  throwOnError,\n  query,\n  suspense,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  throwOnError: ThrowOnError<TQueryFnData, TError, TQueryData, TQueryKey>\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey> | undefined\n  suspense: boolean | undefined\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    query &&\n    ((suspense && result.data === undefined) ||\n      shouldThrowError(throwOnError, [result.error, query]))\n  )\n}\n"],"names":[],"mappings":";;;;;;AACA,YAAY,WAAW;AACvB,SAAS,wBAAwB;;;;AAU1B,IAAM,kCAAkC,CAO7C,SAOA,uBACG;IACH,IACE,QAAQ,QAAA,IACR,QAAQ,YAAA,IACR,QAAQ,6BAAA,EACR;QAEA,IAAI,CAAC,mBAAmB,OAAA,CAAQ,GAAG;YACjC,QAAQ,YAAA,GAAe;QACzB;IACF;AACF;AAEO,IAAM,6BAA6B,CACxC,uBACG;kKACG,YAAA;gDAAU,MAAM;YACpB,mBAAmB,UAAA,CAAW;QAChC;+CAAG;QAAC,kBAAkB;KAAC;AACzB;AAEO,IAAM,cAAc;QAMzB,EACA,MAAA,EACA,kBAAA,EACA,YAAA,EACA,KAAA,EACA,QAAA,EACF,KAMM;IACJ,OACE,OAAO,OAAA,IACP,CAAC,mBAAmB,OAAA,CAAQ,KAC5B,CAAC,OAAO,UAAA,IACR,SAAA,CACE,YAAY,OAAO,IAAA,KAAS,KAAA,oLAC5B,mBAAA,EAAiB,cAAc;QAAC,OAAO,KAAA;QAAO,KAAK;KAAC,CAAA;AAE1D","debugId":null}},
    {"offset": {"line": 1925, "column": 0}, "map": {"version":3,"sources":["file:///home/davi/adp/node_modules/%40tanstack/react-query/src/IsRestoringProvider.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\nconst IsRestoringContext = React.createContext(false)\n\nexport const useIsRestoring = () => React.useContext(IsRestoringContext)\nexport const IsRestoringProvider = IsRestoringContext.Provider\n"],"names":[],"mappings":";;;;;AACA,YAAY,WAAW;;;AAEvB,IAAM,mLAA2B,gBAAA,CAAc,KAAK;AAE7C,IAAM,iBAAiB,kKAAY,aAAA,CAAW,kBAAkB;AAChE,IAAM,sBAAsB,mBAAmB,QAAA","debugId":null}},
    {"offset": {"line": 1942, "column": 0}, "map": {"version":3,"sources":["file:///home/davi/adp/node_modules/%40tanstack/react-query/src/suspense.ts"],"sourcesContent":["import type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserver,\n  QueryObserverResult,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const defaultThrowOnError = <\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  _error: TError,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n) => query.state.data === undefined\n\nexport const ensureSuspenseTimers = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  if (defaultedOptions.suspense) {\n    // Handle staleTime to ensure minimum 1000ms in Suspense mode\n    // This prevents unnecessary refetching when components remount after suspending\n\n    const clamp = (value: number | 'static' | undefined) =>\n      value === 'static' ? value : Math.max(value ?? 1000, 1000)\n\n    const originalStaleTime = defaultedOptions.staleTime\n    defaultedOptions.staleTime =\n      typeof originalStaleTime === 'function'\n        ? (...args) => clamp(originalStaleTime(...args))\n        : clamp(originalStaleTime)\n\n    if (typeof defaultedOptions.gcTime === 'number') {\n      defaultedOptions.gcTime = Math.max(defaultedOptions.gcTime, 1000)\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n) => defaultedOptions?.suspense && result.isPending\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer.fetchOptimistic(defaultedOptions).catch(() => {\n    errorResetBoundary.clearReset()\n  })\n"],"names":[],"mappings":";;;;;;;;AAUO,IAAM,sBAAsB,CAMjC,QACA,QACG,MAAM,KAAA,CAAM,IAAA,KAAS,KAAA;AAEnB,IAAM,uBAAuB,CAClC,qBACG;IACH,IAAI,iBAAiB,QAAA,EAAU;QAI7B,MAAM,QAAQ,CAAC,QACb,UAAU,WAAW,QAAQ,KAAK,GAAA,sCAAI,QAAS,KAAM,GAAI;QAE3D,MAAM,oBAAoB,iBAAiB,SAAA;QAC3C,iBAAiB,SAAA,GACf,OAAO,sBAAsB,aACzB;;gBAAI;;mBAAS,MAAM,kBAAkB,GAAG,IAAI,CAAC;YAC7C,MAAM,iBAAiB;QAE7B,IAAI,OAAO,iBAAiB,MAAA,KAAW,UAAU;YAC/C,iBAAiB,MAAA,GAAS,KAAK,GAAA,CAAI,iBAAiB,MAAA,EAAQ,GAAI;QAClE;IACF;AACF;AAEO,IAAM,YAAY,CACvB,QACA,cACG,OAAO,SAAA,IAAa,OAAO,UAAA,IAAc,CAAC;AAExC,IAAM,gBAAgB,CAC3B,kBAGA,8EACG,iBAAkB,QAAA,KAAY,OAAO,SAAA;AAEnC,IAAM,kBAAkB,CAO7B,kBAOA,UACA,qBAEA,SAAS,eAAA,CAAgB,gBAAgB,EAAE,KAAA,CAAM,MAAM;QACrD,mBAAmB,UAAA,CAAW;IAChC,CAAC","debugId":null}},
    {"offset": {"line": 1977, "column": 0}, "map": {"version":3,"sources":["file:///home/davi/adp/node_modules/%40tanstack/react-query/src/useBaseQuery.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\nimport { isServer, noop, notifyManager } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport { useIsRestoring } from './IsRestoringProvider'\nimport {\n  ensureSuspenseTimers,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch,\n} from './suspense'\nimport type {\n  QueryClient,\n  QueryKey,\n  QueryObserver,\n  QueryObserverResult,\n} from '@tanstack/query-core'\nimport type { UseBaseQueryOptions } from './types'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n  queryClient?: QueryClient,\n): QueryObserverResult<TData, TError> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof options !== 'object' || Array.isArray(options)) {\n      throw new Error(\n        'Bad argument type. Starting with v5, only the \"Object\" form is allowed when calling query related functions. Please use the error stack to find the culprit call. More info here: https://tanstack.com/query/latest/docs/react/guides/migrating-to-v5#supports-a-single-signature-one-object',\n      )\n    }\n  }\n\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const client = useQueryClient(queryClient)\n  const defaultedOptions = client.defaultQueryOptions(options)\n\n  ;(client.getDefaultOptions().queries as any)?._experimental_beforeQuery?.(\n    defaultedOptions,\n  )\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!defaultedOptions.queryFn) {\n      console.error(\n        `[${defaultedOptions.queryHash}]: No queryFn was passed as an option, and no default queryFn was found. The queryFn parameter is only optional when using a default queryFn. More info here: https://tanstack.com/query/latest/docs/framework/react/guides/default-query-function`,\n      )\n    }\n  }\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  ensureSuspenseTimers(defaultedOptions)\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary)\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  // this needs to be invoked before creating the Observer because that can create a cache entry\n  const isNewCacheEntry = !client\n    .getQueryCache()\n    .get(defaultedOptions.queryHash)\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        client,\n        defaultedOptions,\n      ),\n  )\n\n  // note: this must be called before useSyncExternalStore\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  const shouldSubscribe = !isRestoring && options.subscribed !== false\n  React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => {\n        const unsubscribe = shouldSubscribe\n          ? observer.subscribe(notifyManager.batchCalls(onStoreChange))\n          : noop\n\n        // Update result to make sure we did not miss any query updates\n        // between creating the observer and subscribing to it.\n        observer.updateResult()\n\n        return unsubscribe\n      },\n      [observer, shouldSubscribe],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(defaultedOptions)\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (shouldSuspend(defaultedOptions, result)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n  }\n\n  // Handle error boundary\n  if (\n    getHasError({\n      result,\n      errorResetBoundary,\n      throwOnError: defaultedOptions.throwOnError,\n      query: client\n        .getQueryCache()\n        .get<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >(defaultedOptions.queryHash),\n      suspense: defaultedOptions.suspense,\n    })\n  ) {\n    throw result.error\n  }\n\n  ;(client.getDefaultOptions().queries as any)?._experimental_afterQuery?.(\n    defaultedOptions,\n    result,\n  )\n\n  if (\n    defaultedOptions.experimental_prefetchInRender &&\n    !isServer &&\n    willFetch(result, isRestoring)\n  ) {\n    const promise = isNewCacheEntry\n      ? // Fetch immediately on render in order to ensure `.promise` is resolved even if the component is unmounted\n        fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n      : // subscribe to the \"cache promise\" so that we can finalize the currentThenable once data comes in\n        client.getQueryCache().get(defaultedOptions.queryHash)?.promise\n\n    promise?.catch(noop).finally(() => {\n      // `.updateResult()` will trigger `.#currentThenable` to finalize\n      observer.updateResult()\n    })\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2078, "column": 0}, "map": {"version":3,"sources":["file:///home/davi/adp/node_modules/%40tanstack/react-query/src/useQuery.ts"],"sourcesContent":["'use client'\nimport { QueryObserver } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type {\n  DefaultError,\n  NoInfer,\n  QueryClient,\n  QueryKey,\n} from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport type {\n  DefinedInitialDataOptions,\n  UndefinedInitialDataOptions,\n} from './queryOptions'\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: DefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): DefinedUseQueryResult<NoInfer<TData>, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UndefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseQueryResult<NoInfer<TData>, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseQueryResult<NoInfer<TData>, TError>\n\nexport function useQuery(options: UseQueryOptions, queryClient?: QueryClient) {\n  return useBaseQuery(options, QueryObserver, queryClient)\n}\n"],"names":[],"mappings":";;;;AACA,SAAS,qBAAqB;AAC9B,SAAS,oBAAoB;;;;AA+CtB,SAAS,SAAS,OAAA,EAA0B,WAAA,EAA2B;IAC5E,8LAAO,eAAA,EAAa,4LAAS,gBAAA,EAAe,WAAW;AACzD","debugId":null}},
    {"offset": {"line": 2098, "column": 0}, "map": {"version":3,"sources":["file:///home/davi/adp/node_modules/next/src/build/webpack/loaders/next-flight-loader/action-client-wrapper.ts"],"sourcesContent":["// This file must be bundled in the app's client layer, it shouldn't be directly\n// imported by the server.\n\nexport { callServer } from 'next/dist/client/app-call-server'\nexport { findSourceMapURL } from 'next/dist/client/app-find-source-map-url'\n\n// A noop wrapper to let the Flight client create the server reference.\n// See also: https://github.com/facebook/react/pull/26632\n// eslint-disable-next-line import/no-extraneous-dependencies\nexport { createServerReference } from 'react-server-dom-webpack/client'\n"],"names":["callServer","createServerReference","findSourceMapURL"],"mappings":"AAAA,gFAAgF;AAChF,0BAA0B;;;;;;;;;;;;;;;;IAEjBA,UAAU,EAAA;eAAVA,eAAAA,UAAU;;IAMVC,qBAAqB,EAAA;eAArBA,QAAAA,qBAAqB;;IALrBC,gBAAgB,EAAA;eAAhBA,qBAAAA,gBAAgB;;;+BADE;qCACM;wBAKK","ignoreList":[0],"debugId":null}}]
}